Template Language

For this exercise, you will implement a templating language for the Web. It is a small server-side HTML templating language with some server-side scripting in Groovy. The main technologies you need to know are Java, Servlets, HTML5 and Groovy. No deep knowledge of Groovy is required to solve this exercise.

The main idea is that the server-side template is already valid HTML. The usual conditional and loop operations are written in HTML5's data-attributes.

You will write a Java servlet that responds to requests for HTML files. The servlet reads the requested file, parses the HTML, and processes the server-side Groovy and server-side data-attributes, and finally sends the resulting HTML to the browser.

Resuming the aim of this exercise is when a URL is called ( e.g. http://localhost:8080/index.tpl?id=1), read the template (in this case ), process the template file with the given parameters (here id=1 ) and return the result HTML back to the browser. Please see the following example of the template index.tpl (this file is provided to you).
(ver arquivo index.tpl)


Then, a provided Car Java class:
(ver classe Car.java)


renders an HTML page like:
<html>
	<head>
		<title>Mercedes-Benz</title>
	</head>
	<body>
		<h1 title="Mercedes-Benz">Mercedes-Benz</h1>
		<h2 title="Hybrid">Fuel Type: Hybrid</h2>
		<div>Model: Model 0</div>
		<div>Model: Model 1</div>
		<div>Model: Model 2</div>
	</body>
	
</html>




Please, deliver your solution according to the following:

Maintain the same structure containing the Maven project, only adding the source code files that you consider necessary. Please make sure that unnecessary files are excluded.
The project has to be executed by the Maven goal: mvn jetty:run
The tests have to be executed by the Maven goal: mvn test
The solution should provide testing URL similar to http://localhost:8080/index.tpl?id=2


Specification
<script> element
A server-side script element is marked by the attribute type="server/groovy". If the servlet finds such a script element, it should execute its body as groovy. The element itself produces no output for the browser.

The script element may put new Groovy variables in the state, like car in the example. Initially, the state should have at least one useful variable: request, being the current HttpServletRequest object. Using that, the template can depend on input from  parameters.

It is possible to call Java classes from the Groovy in the element. Groovy can import and instantiate Java classes and call methods on them. Groovy engine know the getter-setter pattern, so the Groovy car.brand will be mapped to the Java methods getBrand() or setBrand(String) in the usual way.

$-expressions
There may be server-side $-expressions in template. They may appear inside the element bodies and inside the values of attributes. That means they may not appear in the element tags or in the keys of attributes.

When the servlet finds an expression, it should evaluate the Groovy expression in the current Groovy state, and render the result in the HTML output.

If the result is rendered inside the body of an HTML element, you must escape any characters that are not allowed inside an HTML element. If the result is rendered inside the value of an attribute, you must escape any characters that are not allowed inside an HTML attribute value.


data-if

An HTML element may have an attribute with key data-if.

If the result is true, the servlet should render the element in the normal way, but without the data-if attribute. If the result is false, the servlet should not render the element.



data-loop-x (Optional)
An HTML element may have an attribute like data-loop-x, where  stands for something that can be a variable name in Groovy. When the servlet finds such an attribute, it should evaluate the attribute value as a Groovy expression, in the current Groovy state. If the result is an array (or a similar thing), then the servlet should render the element once for every item in the array. During each rendering of the element, the variable x stands for the item in the array. The result of the Groovy evaluation may come from a Java method call, therefore objects similar should also work:

- Groovy collections
- Java array
- Java collections.
If an element has both data-if and data-loop attributes, what should happen? What do you think is most useful?


local variables (Optional)
How could we add local variables? Maybe I want variable car to stand for the value of new Car("Mercedes-Maybach"), but only during the rendering of one <div>-element. After that element, the variable should go back to whatever value it had before if it had any.



Implementation hints
You should be able to run the servlet with the provided package using mvn jetty:run. For parsing HTML, you can use any built-in library, your own code, or any libraries you like, as long as they are open source, and you add them to the project. Make your life easy: You may assume all HTML files are valid XML. Having parsed HTML, the servlet should traverse the HTML elements in tree-order, and render them, in order to send them to the browser. The formatted HTML needn't be the same character-by-character, as long as it is equivalent as HTML.



In general, things you may need
Clean code, please.
Good Object-Oriented design is a must. Badly structured code is our main reason for rejection.
Provide description. Document your design. Argue for it. Mention any alternatives that you have discarded.
You may use libraries if they are open-source, and you include them.
Unit Tests that demonstrate that the code is correct are highly recommended. No need for 100% coverage though.
Your code should be well documented.
Optional features are nice, but they are optional. You wonâ€™t fail by not doing them.
You may use Google and any other sources of information, of course.